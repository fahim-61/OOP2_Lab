# -*- coding: utf-8 -*-
"""OOP Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zjx85FYQFBosWxt_r3F2dRr4W1TxDzNP
"""

# Importing necessary libraries
!pip install python-docx
import numpy as np
import json
import docx
from google.colab import files

# Base class for expense tracker
class ExpenseTracker:
    def __init__(self):
        self.expenses = []  # List to store expenses
        self.categories = ["Food", "Transport", "Shopping", "Utilities", "Others"]

    #Method to add a new expense
    def add_expense(self, amount, category, description):
        """Adds a new expense to the tracker."""
        try:
            #Check if the catagory is valid
            if category not in self.categories:
                raise ValueError("Invalid category. Choose from: " + ", ".join(self.categories))
            #Add expense to the list
            self.expenses.append({"amount": float(amount), "category": category, "description": description})
            print(f"Added expense: {amount} in category '{category}' with description '{description}'")
        except ValueError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")


    #Method to view all recorded expense
    def view_expenses(self):
        """Displays all the expenses."""
        if not self.expenses:
            print("No expenses recorded yet.")
        else:
            print("\n--- All Expenses ---")
            for idx, expense in enumerate(self.expenses, start=1):
                print(f"{idx}. {expense['amount']} - {expense['category']} - {expense['description']}")
            print("\n")

    #Method to filter expense by catagory
    def filter_expenses(self, category):
        """Filters expenses by category."""
        filtered = [expense for expense in self.expenses if expense["category"] == category]
        if not filtered:
            print(f"No expenses found in category '{category}'")
        else:
            print(f"\n--- Expenses in '{category}' ---")
            for expense in filtered:
                print(f"{expense['amount']} - {expense['description']}")
            print("\n")

    #Method to update an existing expense
    def update_expense(self, index, amount, category, description):
        """Updates an existing expense."""
        try:
            #check if the expense index is valid
            if index < 0 or index >= len(self.expenses):
                print("Invalid index. Expense not found.")
                return
            #check if the catagory is valid
            if category not in self.categories:
                raise ValueError("Invalid category. Choose from: " + ", ".join(self.categories))
            #Update the expense
            self.expenses[index] = {"amount": float(amount), "category": category, "description": description}
            print(f"Updated expense at index {index + 1} with new details: {amount} - {category} - {description}")
        except ValueError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")

    #Method to save expenses to a JSON file
    def save_expenses(self, file_name="expenses.json"):
        """Saves expenses to a file."""
        try:
            with open(file_name, "w") as file:
                json.dump(self.expenses, file)
            print("Expenses saved successfully!")
        except Exception as e:
            print(f"Error saving expenses: {e}")

    #Method to export expenses to a .docx file
    def save_expenses_as_doc(self, file_name="expenses.docx"):
        """Exports expenses to a .docx file and enables download in Colab."""
        try:
            # Create and save the document
            doc = docx.Document()
            doc.add_heading('Expense Report', level=1)
            for idx, expense in enumerate(self.expenses, start=1):
                doc.add_paragraph(f"{idx}. Amount: {expense['amount']}, Category: {expense['category']}, Description: {expense['description']}")
            doc.save(file_name)
            print(f"Expenses exported to {file_name} successfully!")

            # Download the file in Colab
            files.download(file_name)
            print(f"{file_name} downloaded successfully!")
        except Exception as e:
            print(f"Error saving expenses as .docx: {e}")

    def process_expenses(self):
        # Assuming self.expenses is a NumPy array
        expenses = np.array(self.expenses)
        print(f"\nOriginal Array: {expenses}\n")

        # Indexing & Slicing
        first_two_expenses = expenses[:2]
        print(f"First Two Expenses: {first_two_expenses}")
        last_two_expenses = expenses[-2:]
        print(f"Last Two Expenses: {last_two_expenses}\n")

        # Copy & View
        view_expenses = expenses[:3]
        copy_expenses = expenses[-3:].copy()
        print(f"View as first three: {view_expenses}")
        print(f"Copy as last three: {copy_expenses}\n")

        # Shape & Reshape
        if expenses.size % 2 == 0:
            reshaped_expenses = expenses.reshape(-1, 2)
            print(f"Reshaped: {reshaped_expenses}\n")
        else:
            reshaped_expenses = np.pad(expenses, (0, 1), mode='constant').reshape(-1, 2)
            print(f"Reshaped: {reshaped_expenses}\n")

        # Flatten
        flattened_expenses = reshaped_expenses.flatten()
        print(f"Flattened: {flattened_expenses}\n")

# Inherited class for statistics
class ExpenseStats(ExpenseTracker):
    def __init__(self):
        super().__init__()

    def total_expenses(self):
        """Calculates the total expenses."""
        total = sum(expense["amount"] for expense in self.expenses)
        print(f"Total expenses: {total}")
        return total

    def category_distribution(self):
        """Displays category-wise expense distribution."""
        if not self.expenses:
            print("No expenses recorded yet.")
            return
        amounts = [expense["amount"] for expense in self.expenses]
        categories = [expense["category"] for expense in self.expenses]
        unique_categories = np.unique(categories)
        print("\n--- Expense Distribution ---")
        for category in unique_categories:
            total = sum(amount for amount, cat in zip(amounts, categories) if cat == category)
            print(f"{category}: {total}")
        print("\n")

# Encapsulation for user interaction
class UserInterface:
    def __init__(self):
        self.tracker = ExpenseStats()

    def menu(self):
        """Displays the main menu and handles user input."""
        while True:
            print("\n--- Expense Tracker Menu ---")
            print("1. Add Expense")
            print("2. View Expenses")
            print("3. Filter Expenses by Category")
            print("4. View Total Expenses")
            print("5. View Category Distribution")
            print("6. Update Expenses")
            print("7. Save Expenses")
            print("8. Export Expenses as DOC")
            print("9. Numpy Operation")
            print("10. Sign Out")

            try:
                choice = int(input("\nEnter your choice: "))
                if choice == 1:
                    amount = input("Enter amount: ")
                    category = input("Enter category (Food,Transport,Shopping,Utilities,Others): ")
                    description = input("Enter description: ")
                    self.tracker.add_expense(amount, category, description)
                elif choice == 2:
                    print("\n--- All Expenses ---")
                    self.tracker.view_expenses()
                elif choice == 3:
                    print("\n--- Filter Expenses by Category ---")
                    category = input("Enter category to filter: ")
                    self.tracker.filter_expenses(category)
                elif choice == 4:
                    print("\n--- Total Expenses ---")
                    self.tracker.total_expenses()
                elif choice == 5:
                    print("\n--- Category Distribution ---")
                    self.tracker.category_distribution()
                elif choice == 6:
                    print("\n--- Update Expenses ---")
                    index = int(input("Enter the index of the expense to update: ")) - 1
                    amount = input("Enter new amount: ")
                    category = input("Enter new category (Food,Transport,Shopping,Utilities,Others): ")
                    description = input("Enter new description: ")
                    self.tracker.update_expense(index, amount, category, description)
                elif choice == 7:
                    print("\n--- Save Expenses ---")
                    self.tracker.save_expenses()
                elif choice == 8:
                    print("\n--- Export Expenses as DOC ---")
                    self.tracker.save_expenses_as_doc()
                elif choice == 9:
                    print("\n--- Numpy Operation ---")
                    self.tracker.process_expenses()
                elif choice == 10:
                    print("Sign Out Successfully!!")
                    break
                else:
                    print("Invalid choice. Please try again.")
            except ValueError:
                print("Please enter a valid number.")

# Initialize and run the app
if __name__ == "__main__":
    while True:
        print("\n--- Welcome to Expense Tracker Apps ---")
        print("1. Sign In")
        print("2. Sign Up")
        print("3. Exit")
        try:
            choice = int(input("\nEnter your choice: "))
            if choice == 1:
                username = input("Enter Username: ")
                password = input("Enter Password: ")
                if password == "1234" or password == "1122":
                    ui = UserInterface()
                    ui.menu()
                else:
                    print("Wrong Password. Please Try Again")

            elif choice == 2:
                fullname = input("Enter Fullname: ")
                username = input("Enter Username: ")
                password = input("Enter Password: ")
                repassword = input("Re-Enter Password: ")

                if password == repassword:
                    print("Sign Up Successfully!!")
                else:
                    print("Password Not Match. Please Try Again")

            elif choice == 3:
                print("Exit Successfully, Good Night!!")
                break
            else:
                print("Invalid choice. Please try again.")

        except ValueError:
            print("Please enter a valid number.")